
def update_word_length(redis_client, word):
    """
    Update Redis with the length of a word.

    Args:
        redis_client (redis.StrictRedis): The Redis client instance.
        word (str): The word to update length for.
    """
    if not word or not isinstance(word, str):
        print(f"Invalid word: {word}")
        return

    try:
        length = len(word)
        redis_client.hincrby("analysis:word_lengths", str(length), 1)
    except Exception as e:
        print(f"Error updating word length: {e}")

def get_word_length_stats(redis_client):
    """
    Retrieve and calculate word length statistics.

    Args:
        redis_client (redis.StrictRedis): The Redis client instance.

    Returns:
        dict: Average word length, standard deviation, and length distribution.
    """
    try:
        redis_key = "analysis:word_lengths"
        lengths = redis_client.hgetall(redis_key)

        # Calculate total words and total length
        total_words = sum(int(count) for count in lengths.values())
        total_length = sum(int(length) * int(count) for length, count in lengths.items())
        average_length = total_length / total_words if total_words > 0 else 0

        # Calculate standard deviation
        variance = sum(((int(length) - average_length) ** 2) * int(count) for length, count in lengths.items())
        standard_deviation = (variance / total_words) ** 0.5 if total_words > 0 else 0

        return {
            "average_length": average_length,
            "standard_deviation": standard_deviation,
            "distribution": lengths
        }
    except Exception as e:
        print(f"Error calculating word length stats: {e}")
        return {
            "average_length": 0,
            "standard_deviation": 0,
            "distribution": {}
        }

# Initialize Redis client
redis_client = redis.StrictRedis(host="localhost", port=6379, decode_responses=True)

# Update word lengths
words = ["redis", "streaming", "data", "analysis", "complexity"]
for word in words:
    update_word_length(redis_client, word)

# Retrieve and display statistics
stats = get_word_length_stats(redis_client)
print(f"Average Word Length: {stats['average_length']}")
print(f"Standard Deviation: {stats['standard_deviation']}")
print("Word Length Distribution:")
for length, count in stats['distribution'].items():
    print(f"Length {length}: {count} occurrences")
